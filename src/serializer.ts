import { writeFileSync } from "fs";
import { BinaryWriter } from "./misc.js";
import { CollisionBinary } from "./types.js";

const CSB_MOBJ_HEADER = new Uint8Array([
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00,
	
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00
])

export function serializeCSB(binary: CollisionBinary): ArrayBuffer {
	if (!binary.isSerializable)
		throw new Error("Collision Binary not supported for serialization yet")
	
	const writer = new BinaryWriter()
	
	// unknown header + string section (which for)
	writer.writeArrayBuffer(CSB_MOBJ_HEADER.buffer)
	writer.writeString('Collision')
	
	// Section header table
	const groups = binary.vertexGroups
	writer.writeInt32(groups.length << 16)
	writer.writeInt32((groups.length - 1) << 24)
	
	for (let i = 1; i < groups.length; i++) {
		writer.writeInt16(i)
		writer.writeInt16(1)
	}
	
	// vertex groups
	for (const group of groups) {
		group.toBinaryWriter(writer)
	}
	
	return writer.toArrayBuffer()
}